.globalconfig Default Global Config

####################################################################################################
# Do not modify this file since it may be overwritten without notice.
####################################################################################################

#---------------------------------------------------------------------------------------------------
# Available Functions
#---------------------------------------------------------------------------------------------------

// add
// add-indent(text, indent: string): string
// add-new-page
// autoindent-return
// call-action - invoke action via search UI
// char-at(string, int): string
// complete
// concat(...): string
// debug-stack
// div
// dp
// dump-scopes - Output all scope values to the log.
// ensure-saved
// enter-page
// eq
// escape-re
// exec
// exit-app
// exit-page
// format(string, ...): string
// ge
// get-clipboard(): string
// get-cursor-text-re
// get-input([closure]): string - get input, scope args { init-text }
// get-line-end(text: string, pos: int): int
// get-line-ident(string, position)
// get-line-start(text: string, pos: int): int
// get-page-count(): int
// get-page-index(): int - get index of current page
// get-page-title(int): string
// get-string-from-to(string, int, int): string
// get-view-pos(): int
// get-view-selected-text(): string
// get-view-text(): string
// get-whitespace(text: string; pos, max: int): string - Get all whitespace from text[pos] up to text[max] or non-whitespace
// goto-next-major-version
// goto-next-version
// goto-previous-major-version
// goto-previous-version
// gsub
// gsub(text, regex, replacement: string): string
// gt
// incremental-search(source, prefilter: (regex -> regex), transform: (string -> string))
// indent-block
// index-of(haystack, needle[, start-index[, end-index]]): int
// insert-date
// insert-datetime
// insert-text(...)
// is-defined(symbol: string): bool
// jump-to-page(int) - set page index and move page to end
// launch-snippet
// le
// length(string): int
// load-config
// log
// lt
// match-re(text, regex: string): string
// mod
// mul
// navigate-contents
// navigate-sigil
// navigate-title
// navigate-todo
// ne
// occur
// on-text-changed
// open
// reset-config
// reset-indent(text: string): string
// restart-app - Tear down UI, reload all books and recreate UI.
// reverse-lines
// scroll-pos-into-view(pos: int)
// search-current-page(prefilter: string) - occur but on lines matching regex
// set-page-index(int) - set current page
// set-view-pos(int)
// set-view-selected-text(text: string)
// set-view-selection(from, to: int)
// smart-paste
// sort-lines
// sub
// substring(string; startIndex, length: int): string
// to-int(string): int
// to-str(int): string
// transform-lines
// unindent-block

// Variable: set to non-zero to debug scope bindings.
// debug-binding

// Variable: set to non-null to debug key bindings.
// debug-keys

#-------------------------------------------------------------------------------
# UI config
#-------------------------------------------------------------------------------

text-font = "Consolas, 9"
info-font = "Verdana, 12"
log-font = "Consolas, 8"
app-title = "Barry's Scratchpad"


#-------------------------------------------------------------------------------
# Key bindings
#-------------------------------------------------------------------------------

# Reset this config with reset-config
C-M-R = reset-config

C-S-F4 = restart-app

"C-M-?" = dump-scopes

debug-keys = nil

C-Up = goto-prev-para
C-Down = goto-next-para
"C-*" = repeat-selection

F1 = create-snippet-from-selection

M-S-Up = { goto-previous-major-version(300) }
M-S-Down = { goto-next-major-version(300) }

M-r = replace-command

C-o = launch-url

C-a = goto-sol
C-e = goto-eol

"C-!" = { insert-header('#', 100) }
"C-@" = { insert-header('*', 90) }
"C-#" = { insert-header('-', 80) }

M-Return = jump-title-link

M-Left = goto-previous-page
M-PgUp = goto-previous-page
M-Right = goto-next-page
M-PgDn = goto-next-page

M-x = call-action

M-o = occur

#-------------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------------

occur = {
  search-current-page('')
}

find-page-index = { |title|
  index := get-page-count()
  while ge(index, 0) {
    if eq(title, get-page-title(index)) {
      return index
    }
    index = sub(index, 1)
  }
  return nil
}

jump-to-title = { |title|
  index := find-page-index(title)
  if !index { return }
  jump-to-page(index)
}

jump-title-link = {
  line := get-current-line-text()
  sigil := index-of(line, '>>> ')
  if !sigil { return }
  title := get-string-from-to(line, add(sigil, 4), length(line))
  jump-to-title(title)
}

goto-next-page = {
  target := add(get-page-index(), 1)
  if eq(target, get-page-count()) {
    add-new-page()
  } else {
    set-page-index(target)
  }
}

goto-previous-page = {
  set-page-index(sub(get-page-index(), 1))
}

create-snippet-from-selection = {
  sel := get-view-selected-text()
  if sel && ne(sel, '') {
    title := get-input-text("Snippet")
    launch-snippet({
      text := sel
      snippet-color := '#FFFFC0'
    })
  }
}

launch-url = {
  value := get-cursor-text-re("\S+")
  if !value { return }
  if !is-url(value) { return }
  open(value)
}

repeat-selection = {
  sel := get-view-selected-text()
  if !sel || eq(sel, '') { return }
  count := get-input-number('repeat count')
  if !count || le(count, 0) { return }
  set-view-selected-text(str-n(sel, count))
}

goto-eol = {
  set-view-pos(
    get-line-end(
      get-view-text(), 
      get-view-pos()))
}

goto-sol = {
  set-view-pos(
    get-line-start(
      get-view-text(), 
      get-view-pos()))
}

cut-current-line-text = {
  text := get-view-text()
  pos := get-view-pos()
  sol := get-line-start(text, pos)
  eol = get-line-end(text, pos)
  if le(eol, sol) { return }
  set-view-selection(sol, eol)
  result := get-view-selected-text()
  set-view-selected-text('')
  result
}

insert-header = { |char, count|
  header := cut-current-line-text()
  line := str-n(char, count)
  insert-line(line)
  insert-line(format("{0} ", char))
  insert-line(line)
  goto-prev-line-end()
  goto-prev-line-end()
  if header {
    insert-text(header)
  }
}

goto-prev-para = {
  text := get-view-text()
  pos := get-view-pos()
  sol := get-line-start(text, pos)
  // go to previous line if we are at start of current line
  if eq(pos, sol) {
    pos := sub(pos, 1)
  }
  while gt(pos, 0) {
    pos := get-line-start(text, pos)
    eol := get-line-end(text, pos)
    if eq(pos, eol) {
      // blank line
      break
    }
    pos := sub(pos, 1)
  }
  if gt(pos, 0) {
    // set-view-pos(pos)
    set-view-selection(pos, add(pos, 1))
    scroll-pos-into-view(pos)
  }
}

goto-next-para = {
  text := get-view-text()
  eof := length(text)
  pos := get-view-pos()
  eol := get-line-end(text, pos)
  // go to next line if we are at end of current line
  if eq(pos, eol) {
    pos := add(pos, 1)
  }
  while lt(pos, eof) {
    pos := get-line-start(text, pos)
    eol := get-line-end(text, pos)
    if eq(pos, eol) {
      // blank line
      break
    }
    pos := add(eol, 1)
  }
  // set-view-pos(pos)
  set-view-selection(pos, add(pos, 1))
  scroll-pos-into-view(pos)
}

replace-command = {
  sel := get-view-selected-text()
  if !sel || eq(sel, '') { return }
  foo := get-input-text('Regex')
  if !foo { return }
  dst := get-input-text('Replacement')
  if !dst { return }
  ensure-saved()
  set-view-selected-text(gsub(sel, foo, dst))
}



#-------------------------------------------------------------------------------
# Utility functions
#-------------------------------------------------------------------------------

NEWLINE = '
'

get-line-indent = { |text, pos|
  get-whitespace(text, get-line-start(text, pos), pos)
}

is-url = { |text|
  match-re(text, "^https?://\S+$")
}

str-n = { |text, count|
  result := ""
  while gt(count, 0) {
    result = concat(result, text)
    count = sub(count, 1)
  }
  result
}

insert-n = { |text, count|
  insert-text(str-n(text, count))
}

goto-prev-line-end = {
  text := get-view-text()
  line-start := get-line-start(text, get-view-pos())
  prev-line-end := sub(line-start, 1)
  if ge(prev-line-end, 0) {
    set-view-pos(prev-line-end)
  }
}

insert-line = { |text|
  insert-text(concat(text, NEWLINE))
}

get-current-line-text = {
  text := get-view-text()
  pos := get-view-pos()
  sol := get-line-start(text, pos)
  eol = get-line-end(text, pos)
  if le(eol, sol) { return }

  get-string-from-to(text, sol, eol)
}

get-input-number = { |current|
  result = nil
  while !result {
    current = get-input-text(current)
    if !current {
      return nil
    }
    result = to-int(current)
  }
  result
}

get-input-text = { |current|
  get-input({
    init-text := current
  })
}

